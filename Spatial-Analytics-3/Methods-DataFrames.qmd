---
title: "Methods & DataFrames for Spatial Points"
author: "Muhammad Uzair"
warning: FALSE
about: 
  template: jolla
  image: spatial-image.png
description: ""
categories: ["Spatial Analytics"]
bibliography: references.bib
date: last-modified
---

In my last article, I explained the building blocks of **Spatial** and **SpatialPoints** class. But that was only one part of the concept. Since in real world problems, spatial data would use much broader use of SpatialPoints. In this article, I would extend the discussion of SpatialPoints to **Methods** and **Data Frames** for Spatial Point Data.

If you want to have recap of SpatialPoints, you can find it here:

[Spatial Objects And Points in R](https://medium.com/@muzairaslam/spatial-objects-and-points-in-r-d85e42f716ee)




## Methods

Methods are available to access the values of the slots of Spatial objects. Here I will explain two important Methods for dealing with **SpatialPoints**.

1. bbox(): It returns the bounding box an object. It is used for data handling and data visualization of **SpatialPoints** class.
2. proj4string(): Sets or retrieves projection attributes on classes extending SpatialData.
3. coordinates(): It extracts the coordinates from **SpatialPoints** class. 
4. summary(): It reports the number of spatial entities, the projection information, and the
bounding box in **SpatialPoints** class.

To have a deeper understanding what each of these methods in the **sp** package, I read a data file with the positions of CRAN mirrors across the world in 2005.

```{r}
library(sp)
```



```{r dataloading}
#| cache: true

cran_df <- read.table("http://www.asdar-book.org/datasets/CRAN051001a.txt", header = TRUE)
```

Then we see its first six rows:

```{r}
head(cran_df)
```
Now I will create **SpaitalPoints** object from it. From my last blog, we know that it requires two steps:

1. Get the data in the matrix form

2. Set up a CRS (Cordinate Reference System)

I start with making a longitude and latitude matrix
```{r}
# make a latitude and longitude matrix
cran_mat <- cbind(cran_df$long, cran_df$lat) 

# assign row names from 1 to number of rows
row.names(cran_mat) <- 1:nrow(cran_mat)

# view the matrix structure
str(cran_mat)
```
Then I make CRS (Coordinate Reference System) object: 

```{r}
# make a CRS object in longlat and World Geodetic System(WGS84)
CRS_obj <- CRS(projargs = "+proj=longlat +ellps=WGS84")
```
Finally I create **SpatialPoints** object using the longitude and latitude matrix and CRS.

```{r}
# make a spatial points class by long/lat matrix and proj4string
cran_sp <- SpatialPoints(coords = cran_mat, proj4string = CRS_obj)
```

Now I use the first method : **bbox()** on our spatial object.

```{r}
bbox(cran_sp)
```

The first row reports the west-east range and the second the south-north direction.

Next I use **proj4string()** method.

```{r}
proj4string(cran_sp)
```
This shows the projection attribute of the Spatial Object.

For extraction of spatial coordinates, I use coordinates() method. I use indices to subset CRAN mirrors located in Brazil in 2005:

```{r}
# select indices of Brazil from data frame object
brazil_indices <- which(cran_df$loc == "Brazil")

# print the indices
brazil_indices
```

Using these indices locate the Longitude and Latitude coordinates.

```{r}
coordinates(cran_sp)[brazil_indices,]
```

I can also use **summary()** method to locate the coordinates. This will also give me projection information and coordinates min and max with the information of class in use.

```{r}
summary(cran_sp[brazil_indices, ])
```


## Data Frames for Spatial Point Data

We will start by creating **SpatialPointsDataFrame** object in R. 

```{r}
cran_sp_df <- SpatialPointsDataFrame(coords = cran_mat, data = cran_df,
                                     proj4string = CRS_obj, match.ID = TRUE)
```

This class is very similar to the R's **data.frame()** class which is used to create data frames in R. We will use summary() method to see the attributes contained in it.


```{r}
summary(cran_sp_df)
```

Using other extraction operators, especially the **$** operator, returns the data frame column referred to

```{r}
str(cran_sp_df$loc)
```
## Relationship between Spatial Points and Spatial Points DataFrame

I summarize the relationships between Spatial Points and their classes from [@roger_2013]

![Spatial points classes and their slots; arrows show subclass extensions](spatial.png)

Let us examine the contents of objects of the SpatialPointsDataFrame class, shown in the figure. Since the class extends SpatialPoints, it also inherits the information contained in the Spatial class object. The data slot is where the information from the data frame is kept, in a data.frame object.

```{r}
getClass("SpatialPointsDataFrame")
```

## Conclusion
In this article, I extended the discussion of SpatialPoints class to its methods and data frame object. These tools will help us visualizing data and wrangling data in data frame. In next article, I will explain Spatial Lines which formed using the Spatial Points.


#### References


::: {#refs}
:::







